{"version":3,"file":"sf-random-text.js","sourceRoot":"","sources":["src/sf-random-text.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAmB,MAAM,KAAK,CAAC;AAC5D,0FAA0F;AAC1F,wCAAwC;AACxC,+CAA+C;AAC/C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,6CAA6C;AAC7C,mDAAmD;AAGnD;;;;;EAKE;AAEF;;;;;;;;;;GAUG;AAEH,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,UAAU;IA6B1C;QACE,KAAK,EAAE,CAAC;QAtBV,aAAQ,GAAG,GAAG,EAAE;YACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC/B,CAAC,CAAA;QAUD,aAAQ,GAAG,KAAK,IAAI,EAAE;YAEpB,MAAM,GAAG,GAAI,IAAI,CAAC,QAAQ,EAAoB,CAAC,MAAM,CAAC;YACtD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,GAAG,EAAE,CAAC,GAAC,GAAG,CAAC;YAElD,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAErC,CAAC,CAAA;IAID,CAAC;IAEkB,YAAY,CAAC,kBAAqE;QAEnG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAElB,CAAC;IAEQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAA;IAC3B,CAAC;IAEQ,MAAM;QAEb,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;;;KAGhC,CAAC;IACJ,CAAC;CAEF,CAAA;AAzCiB,mBAAM,GAAG,GAAG,CAAA;;;;;;GAM1B,CAAA;AAfF;IADC,QAAQ,EAAE;2CACI;AAGf;IADC,QAAQ,EAAE;2CACI;AANJ,YAAY;IADxB,aAAa,CAAC,gBAAgB,CAAC;GACnB,YAAY,CAqDxB;SArDY,YAAY","sourcesContent":["/**\n * @license\n * Copyright 2022 Superflow.dev\n * SPDX-License-Identifier: MIT\n */\n\nimport {LitElement, html, css, PropertyValueMap} from 'lit';\n//import {customElement, query, queryAssignedElements, property} from 'lit/decorators.js';\n//import {SfISelect} from 'sf-i-select';\n//import {SfISubSelect} from 'sf-i-sub-select';\nimport {customElement, property} from 'lit/decorators.js';\n// import {LitElement, html, css} from 'lit';\n// import {customElement} from 'lit/decorators.js';\n\n\n/*\n\nModes: View, Add, Edit, Delete, Admin\nDB: partitionKey, rangeKey, values\n\n*/\n\n/**\n * SfRandomText element.\n * @fires renderComplete - When the list is populated\n * @fires valueChanged - When the value is changed\n * @property apiId - backend api id\n * @property label - input label\n * @property name - name of the input\n * @property mode - mode of operation\n * @property selectedId - id to preselect\n * @property selectedValue - callback function\n */\n@customElement('sf-random-text')\nexport class SfRandomText extends LitElement {\n\n  @property()\n  texts!: string;\n\n  @property()\n  index!: number;\n\n  getTexts = () => {\n    return JSON.parse(this.texts)\n  }\n\n  static override styles = css`\n    \n    .SfRandomTextC {\n      \n    }\n\n  `;\n\n  loadMode = async () => {\n\n    const len = (this.getTexts() as Array<string>).length;\n    this.index = parseInt(Math.random()*100 + \"\")%len;\n\n    console.log('index ' + this.index);\n\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\n\n    this.loadMode();\n\n  }\n  \n  override connectedCallback() {\n    super.connectedCallback()\n  }\n  \n  override render() {\n\n    return html`\n      <div class=\"SfRandomTextC\" part=\"text\">\n        ${this.getTexts()[this.index]}\n      </div>\n\n    `;\n  }\n\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sf-random-text': SfRandomText;\n  }\n}\n"]}